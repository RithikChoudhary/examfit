<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Practice Session - <%= paper.questionPaperName %></title>
    <link rel="stylesheet" href="/css/home.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        body {
            background: var(--gray-50);
            margin: 0;
            padding: 0;
        }
        
        .session-header {
            background: var(--white);
            border-bottom: 2px solid var(--gray-200);
            padding: 1rem 0;
            position: sticky;
            top: 0;
            z-index: 100;
            box-shadow: 0 2px 8px var(--shadow-sm);
        }
        
        .header-content {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .session-info h2 {
            margin: 0;
            color: var(--gray-900);
            font-size: 1.25rem;
        }
        
        .session-info p {
            margin: 0.25rem 0 0 0;
            color: var(--gray-600);
            font-size: 0.875rem;
        }
        
        .timer-container {
            display: flex;
            align-items: center;
            gap: 2rem;
        }
        
        .timer {
            background: linear-gradient(135deg, var(--blue-500), var(--purple-500));
            color: var(--white);
            padding: 0.75rem 1.5rem;
            border-radius: 12px;
            font-size: 1.25rem;
            font-weight: 700;
            font-family: 'Courier New', monospace;
            min-width: 120px;
            text-align: center;
        }
        
        .timer.warning {
            background: linear-gradient(135deg, #f59e0b, #d97706);
            animation: pulse 1s infinite;
        }
        
        .timer.danger {
            background: linear-gradient(135deg, #ef4444, #dc2626);
        }
        
        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }
        
        .session-controls {
            display: flex;
            gap: 1rem;
        }
        
        .session-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
            display: grid;
            grid-template-columns: 1fr 280px;
            gap: 2rem;
        }
        
        .questions-area {
            background: var(--white);
            border-radius: 16px;
            padding: 2rem;
            box-shadow: 0 4px 16px var(--shadow-sm);
        }
        
        .question-navigation {
            background: var(--white);
            border-radius: 16px;
            padding: 1.5rem;
            box-shadow: 0 4px 16px var(--shadow-sm);
            height: fit-content;
            position: sticky;
            top: 100px;
        }
        
        .question-grid {
            display: grid;
            grid-template-columns: repeat(5, 1fr);
            gap: 0.5rem;
            margin-bottom: 1.5rem;
        }
        
        .question-nav-btn {
            aspect-ratio: 1;
            border: 2px solid var(--gray-300);
            background: var(--white);
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 0.875rem;
        }
        
        .question-nav-btn.current {
            background: var(--blue-500);
            color: var(--white);
            border-color: var(--blue-500);
        }
        
        .question-nav-btn.answered {
            background: var(--success);
            color: var(--white);
            border-color: var(--success);
        }
        
        .question-nav-btn.marked {
            background: var(--warning);
            color: var(--white);
            border-color: var(--warning);
        }
        
        .question-content {
            margin-bottom: 2rem;
        }
        
        .question-number {
            color: var(--blue-500);
            font-weight: 600;
            margin-bottom: 0.5rem;
        }
        
        .question-text {
            font-size: 1.125rem;
            line-height: 1.6;
            color: var(--gray-900);
            margin-bottom: 2rem;
        }
        
        .options-container {
            margin-bottom: 2rem;
        }
        
        .option {
            display: flex;
            align-items: flex-start;
            padding: 1rem;
            margin-bottom: 0.75rem;
            border: 2px solid var(--gray-200);
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .option:hover {
            border-color: var(--blue-300);
            background: var(--blue-50);
        }
        
        .option.selected {
            border-color: var(--blue-500);
            background: rgba(59, 130, 246, 0.1);
        }
        
        .option-label {
            width: 32px;
            height: 32px;
            background: var(--gray-200);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            margin-right: 1rem;
            flex-shrink: 0;
        }
        
        .option.selected .option-label {
            background: var(--blue-500);
            color: var(--white);
        }
        
        .option-text {
            flex: 1;
            line-height: 1.5;
        }
        
        .question-controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding-top: 2rem;
            border-top: 1px solid var(--gray-200);
        }
        
        .control-left {
            display: flex;
            gap: 1rem;
        }
        
        .control-right {
            display: flex;
            gap: 1rem;
        }
        
        .btn {
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            border: none;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .btn-primary {
            background: var(--blue-500);
            color: var(--white);
        }
        
        .btn-secondary {
            background: var(--gray-200);
            color: var(--gray-700);
        }
        
        .btn-warning {
            background: var(--warning);
            color: var(--white);
        }
        
        .btn-success {
            background: var(--success);
            color: var(--white);
        }
        
        .legend {
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
            font-size: 0.875rem;
        }
        
        .legend-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .legend-color {
            width: 16px;
            height: 16px;
            border-radius: 4px;
        }
        
        .progress-summary {
            padding: 1rem;
            background: var(--gray-50);
            border-radius: 8px;
            margin-bottom: 1rem;
        }
        
        .progress-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 0.5rem;
        }
        
        @media (max-width: 768px) {
            .session-container {
                grid-template-columns: 1fr;
                padding: 1rem;
            }
            
            .header-content {
                flex-direction: column;
                gap: 1rem;
            }
            
            .timer-container {
                gap: 1rem;
            }
        }
    </style>
</head>
<body>
    <div class="session-header">
        <div class="header-content">
            <div class="session-info">
                <h2><%= paper.questionPaperName %></h2>
                <p><%= exam.examName %> - <%= subject.subjectName %></p>
            </div>
            <div class="timer-container">
                <div class="timer" id="timer">60:00</div>
                <div class="session-controls">
                    <button class="btn btn-warning" onclick="pauseTimer()" id="pauseBtn">
                        <i class="fas fa-pause"></i> Pause
                    </button>
                    <button class="btn btn-success" onclick="submitSession()">
                        <i class="fas fa-check"></i> Submit
                    </button>
                </div>
            </div>
        </div>
    </div>
    
    <div class="session-container">
        <div class="questions-area">
            <div class="question-content" id="questionContent">
                <!-- Question content will be loaded here -->
            </div>
            
            <div class="question-controls">
                <div class="control-left">
                    <button class="btn btn-secondary" onclick="previousQuestion()" id="prevBtn">
                        <i class="fas fa-chevron-left"></i> Previous
                    </button>
                </div>
                
                <div class="control-right">
                    <button class="btn btn-warning" onclick="markForReview()" id="markBtn">
                        <i class="fas fa-bookmark"></i> Mark for Review
                    </button>
                    <button class="btn btn-primary" onclick="nextQuestion()" id="nextBtn">
                        Next <i class="fas fa-chevron-right"></i>
                    </button>
                </div>
            </div>
        </div>
        
        <div class="question-navigation">
            <h4 style="margin-bottom: 1rem; color: var(--gray-900);">Questions</h4>
            
            <div class="progress-summary">
                <div class="progress-item">
                    <span>Answered:</span>
                    <span id="answeredCount">0</span>
                </div>
                <div class="progress-item">
                    <span>Marked:</span>
                    <span id="markedCount">0</span>
                </div>
                <div class="progress-item">
                    <span>Remaining:</span>
                    <span id="remainingCount"><%= questions.length %></span>
                </div>
            </div>
            
            <div class="question-grid" id="questionGrid">
                <!-- Question navigation buttons will be generated here -->
            </div>
            
            <div class="legend">
                <div class="legend-item">
                    <div class="legend-color" style="background: var(--blue-500);"></div>
                    <span>Current</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color" style="background: var(--success);"></div>
                    <span>Answered</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color" style="background: var(--warning);"></div>
                    <span>Marked</span>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        // Session data
        const questions = <%- JSON.stringify(questions) %>;
        const sessionData = <%- JSON.stringify(sessionData) %>;
        const sessionDuration = <%= duration %> * 60; // Convert to seconds
        
        // Session state
        let currentQuestion = 0;
        let answers = {};
        let markedQuestions = new Set();
        let timeRemaining = sessionDuration;
        let timerInterval;
        let isPaused = false;
        let startTime = Date.now();
        
        // Initialize session
        document.addEventListener('DOMContentLoaded', function() {
            generateQuestionGrid();
            loadQuestion(0);
            startTimer();
        });
        
        function generateQuestionGrid() {
            const grid = document.getElementById('questionGrid');
            grid.innerHTML = '';
            
            questions.forEach((_, index) => {
                const btn = document.createElement('button');
                btn.className = 'question-nav-btn';
                btn.textContent = index + 1;
                btn.onclick = () => loadQuestion(index);
                btn.id = `nav-btn-${index}`;
                grid.appendChild(btn);
            });
        }
        
        function loadQuestion(index) {
            currentQuestion = index;
            const question = questions[index];
            
            const content = `
                <div class="question-number">Question ${index + 1} of ${questions.length}</div>
                <div class="question-text">${question.question}</div>
                <div class="options-container">
                    ${question.options.map(option => `
                        <div class="option ${answers[question.questionId] === option.optionId ? 'selected' : ''}" 
                             onclick="selectOption('${question.questionId}', '${option.optionId}')">
                            <div class="option-label">${option.optionId.toUpperCase()}</div>
                            <div class="option-text">${option.text}</div>
                        </div>
                    `).join('')}
                </div>
            `;
            
            document.getElementById('questionContent').innerHTML = content;
            updateNavigationButtons();
            updateControls();
            updateProgress();
        }
        
        function selectOption(questionId, optionId) {
            answers[questionId] = optionId;
            
            // Update option styling
            document.querySelectorAll('.option').forEach(opt => {
                opt.classList.remove('selected');
            });
            event.currentTarget.classList.add('selected');
            
            updateNavigationButtons();
            updateProgress();
        }
        
        function updateNavigationButtons() {
            document.querySelectorAll('.question-nav-btn').forEach((btn, index) => {
                btn.classList.remove('current', 'answered', 'marked');
                
                if (index === currentQuestion) {
                    btn.classList.add('current');
                } else if (answers[questions[index].questionId]) {
                    btn.classList.add('answered');
                } else if (markedQuestions.has(index)) {
                    btn.classList.add('marked');
                }
            });
        }
        
        function updateControls() {
            document.getElementById('prevBtn').disabled = currentQuestion === 0;
            
            const nextBtn = document.getElementById('nextBtn');
            if (currentQuestion === questions.length - 1) {
                nextBtn.innerHTML = '<i class="fas fa-check"></i> Finish';
                nextBtn.onclick = submitSession;
            } else {
                nextBtn.innerHTML = 'Next <i class="fas fa-chevron-right"></i>';
                nextBtn.onclick = nextQuestion;
            }
            
            const markBtn = document.getElementById('markBtn');
            if (markedQuestions.has(currentQuestion)) {
                markBtn.innerHTML = '<i class="fas fa-bookmark-slash"></i> Unmark';
            } else {
                markBtn.innerHTML = '<i class="fas fa-bookmark"></i> Mark for Review';
            }
        }
        
        function updateProgress() {
            const answeredCount = Object.keys(answers).length;
            const markedCount = markedQuestions.size;
            const remainingCount = questions.length - answeredCount;
            
            document.getElementById('answeredCount').textContent = answeredCount;
            document.getElementById('markedCount').textContent = markedCount;
            document.getElementById('remainingCount').textContent = remainingCount;
        }
        
        function previousQuestion() {
            if (currentQuestion > 0) {
                loadQuestion(currentQuestion - 1);
            }
        }
        
        function nextQuestion() {
            if (currentQuestion < questions.length - 1) {
                loadQuestion(currentQuestion + 1);
            }
        }
        
        function markForReview() {
            if (markedQuestions.has(currentQuestion)) {
                markedQuestions.delete(currentQuestion);
            } else {
                markedQuestions.add(currentQuestion);
            }
            updateNavigationButtons();
            updateControls();
            updateProgress();
        }
        
        function startTimer() {
            timerInterval = setInterval(() => {
                if (!isPaused) {
                    timeRemaining--;
                    updateTimerDisplay();
                    
                    if (timeRemaining <= 0) {
                        submitSession();
                    }
                }
            }, 1000);
        }
        
        function updateTimerDisplay() {
            const minutes = Math.floor(timeRemaining / 60);
            const seconds = timeRemaining % 60;
            const display = `${minutes}:${seconds.toString().padStart(2, '0')}`;
            
            const timer = document.getElementById('timer');
            timer.textContent = display;
            
            // Add warning colors
            timer.classList.remove('warning', 'danger');
            if (timeRemaining <= 300) { // 5 minutes
                timer.classList.add('danger');
            } else if (timeRemaining <= 600) { // 10 minutes
                timer.classList.add('warning');
            }
        }
        
        function pauseTimer() {
            isPaused = !isPaused;
            const btn = document.getElementById('pauseBtn');
            
            if (isPaused) {
                btn.innerHTML = '<i class="fas fa-play"></i> Resume';
                btn.className = 'btn btn-success';
            } else {
                btn.innerHTML = '<i class="fas fa-pause"></i> Pause';
                btn.className = 'btn btn-warning';
            }
        }
        
        async function submitSession() {
            if (!confirm('Are you sure you want to submit your test? This action cannot be undone.')) {
                return;
            }
            
            clearInterval(timerInterval);
            
            const timeSpent = Math.round((Date.now() - startTime) / 1000);
            
            try {
                const response = await fetch('/practice/session/submit', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        sessionData,
                        answers,
                        timeSpent
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    window.location.href = `/practice/results/${result.sessionId}`;
                } else {
                    alert('Error submitting session: ' + result.error);
                }
            } catch (error) {
                console.error('Error submitting session:', error);
                alert('Error submitting session');
            }
        }
        
        // Prevent accidental page navigation
        window.addEventListener('beforeunload', function(e) {
            if (Object.keys(answers).length > 0) {
                e.preventDefault();
                e.returnValue = '';
            }
        });
        
        // Keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            if (e.target.tagName.toLowerCase() === 'input') return;
            
            switch(e.key) {
                case 'ArrowLeft':
                    e.preventDefault();
                    previousQuestion();
                    break;
                case 'ArrowRight':
                    e.preventDefault();
                    nextQuestion();
                    break;
                case 'm':
                case 'M':
                    e.preventDefault();
                    markForReview();
                    break;
                case '1':
                case '2':
                case '3':
                case '4':
                    e.preventDefault();
                    const optionId = ['a', 'b', 'c', 'd'][parseInt(e.key) - 1];
                    const question = questions[currentQuestion];
                    if (question.options.find(opt => opt.optionId === optionId)) {
                        selectOption(question.questionId, optionId);
                    }
                    break;
            }
        });
    </script>
</body>
</html>
