<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Practice Sessions - ExamFit</title>
    <link rel="stylesheet" href="/css/home.css">
    <link rel="stylesheet" href="/css/navbar.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        .practice-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }
        
        .practice-header {
            text-align: center;
            margin-bottom: 3rem;
            padding: 2rem 0;
        }
        
        .practice-header h1 {
            font-size: 2.5rem;
            font-weight: 700;
            color: var(--gray-900);
            margin-bottom: 1rem;
        }
        
        .practice-header p {
            font-size: 1.125rem;
            color: var(--gray-600);
        }
        
        .exam-selection {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 2rem;
            margin-bottom: 3rem;
        }
        
        .exam-card {
            background: #ffffff;
            border: 2px solid #cbd5e1;
            border-radius: 16px;
            padding: 2rem;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
            min-height: 200px;
            display: flex;
            flex-direction: column;
            justify-content: center;
        }
        
        .exam-card:hover {
            border-color: #3b82f6;
            transform: translateY(-4px);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
        }
        
        .exam-card.selected {
            border-color: #3b82f6;
            background: rgba(59, 130, 246, 0.05);
        }
        
        .exam-icon {
            width: 64px;
            height: 64px;
            background: linear-gradient(135deg, #3b82f6, #8b5cf6);
            border-radius: 16px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 1rem;
            color: #ffffff;
            font-size: 1.5rem;
        }
        
        .exam-card h3 {
            color: #1f2937;
            margin: 0.5rem 0;
            font-size: 1.25rem;
            font-weight: 600;
        }
        
        .exam-card p {
            color: #6b7280;
            margin: 0;
            font-size: 0.875rem;
        }
        
        .selection-form {
            background: var(--white);
            border-radius: 16px;
            padding: 2rem;
            box-shadow: 0 4px 16px var(--shadow-sm);
            margin-top: 2rem;
            display: none;
        }
        
        .selection-form.show {
            display: block;
        }
        
        .form-row {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 1.5rem;
        }
        
        .form-group {
            margin-bottom: 1.5rem;
        }
        
        .form-label {
            display: block;
            font-weight: 600;
            color: var(--gray-700);
            margin-bottom: 0.5rem;
        }
        
        .form-select {
            width: 100%;
            padding: 0.75rem;
            border: 2px solid var(--gray-200);
            border-radius: 8px;
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }
        
        .form-select:focus {
            outline: none;
            border-color: var(--blue-500);
        }
        
        .settings-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }
        
        .setting-card {
            background: var(--gray-50);
            padding: 1.5rem;
            border-radius: 12px;
            text-align: center;
        }
        
        .setting-input {
            width: 100%;
            padding: 0.5rem;
            border: 2px solid var(--gray-200);
            border-radius: 8px;
            text-align: center;
            font-size: 1.125rem;
            font-weight: 600;
        }
        
        .quick-links {
            display: flex;
            gap: 1rem;
            justify-content: center;
            flex-wrap: wrap;
            margin-top: 3rem;
        }
        
        .quick-link {
            background: var(--blue-500);
            color: var(--white);
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            text-decoration: none;
            font-weight: 500;
            transition: all 0.3s ease;
        }
        
        .quick-link:hover {
            background: var(--blue-600);
            transform: translateY(-2px);
        }
    </style>
</head>
<body>
    <%- include('../partials/navbar') %>
    
    <div class="practice-container">
        <div class="practice-header">
            <h1><i class="fas fa-clock"></i> Timed Practice Sessions</h1>
            <p>Simulate real exam conditions with our timed practice mode</p>
        </div>
        
        <!-- Exam Selection -->
        <div class="exam-selection" style="display: grid !important; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)) !important; gap: 2rem !important; margin-bottom: 3rem !important;">
            <% if (exams && exams.length > 0) { %>
                <!-- DEBUG: Found <%= exams.length %> exams -->
                <% exams.forEach((exam, index) => { %>
                    <div class="exam-card" onclick="selectExam('<%= exam.examId %>', '<%= exam.examName %>')" style="
                        background: #ffffff !important; 
                        border: 2px solid #d1d5db !important; 
                        border-radius: 16px !important;
                        padding: 2rem !important;
                        cursor: pointer !important;
                        min-height: 220px !important; 
                        width: 100% !important;
                        display: flex !important; 
                        flex-direction: column !important;
                        align-items: center !important;
                        justify-content: center !important;
                        position: relative !important;
                        opacity: 1 !important;
                        visibility: visible !important;
                        box-shadow: 0 4px 12px rgba(0,0,0,0.1) !important;
                        transition: all 0.3s ease !important;
                        text-align: center !important;
                    ">
                        <div class="exam-icon" style="
                            width: 64px !important; 
                            height: 64px !important; 
                            background: linear-gradient(135deg, #3b82f6, #8b5cf6) !important; 
                            border-radius: 16px !important; 
                            display: flex !important; 
                            align-items: center !important;
                            justify-content: center !important;
                            margin-bottom: 1.5rem !important; 
                            color: white !important; 
                            font-size: 1.5rem !important;
                        ">
                            <i class="fas fa-graduation-cap" style="color: white !important;"></i>
                        </div>
                        <h3 style="
                            color: #1f2937 !important; 
                            margin: 0 0 0.5rem 0 !important; 
                            font-size: 1.25rem !important; 
                            font-weight: 600 !important; 
                            text-align: center !important;
                            display: block !important;
                            line-height: 1.3 !important;
                        "><%= exam.examName %></h3>
                        <p style="
                            color: #6b7280 !important; 
                            margin: 0 !important; 
                            font-size: 0.875rem !important; 
                            text-align: center !important;
                            display: block !important;
                        "><%= exam.subjects ? exam.subjects.length : 0 %> Subjects Available</p>
                    </div>
                <% }) %>
            <% } else { %>
                <div style="text-align: center; padding: 4rem; background: white; border-radius: 16px; border: 2px solid #e2e8f0;">
                    <div style="width: 80px; height: 80px; background: linear-gradient(135deg, #3b82f6, #8b5cf6); border-radius: 20px; display: flex; align-items: center; justify-content: center; margin: 0 auto 2rem; color: white; font-size: 2rem;">
                        <i class="fas fa-graduation-cap"></i>
                    </div>
                    <h3 style="color: #1f2937; margin-bottom: 1rem;">No Exams Available</h3>
                    <p style="color: #6b7280; margin-bottom: 2rem;">Practice sessions will be available once exams are added to the system.</p>
                    <a href="/dashboard" style="background: #3b82f6; color: white; padding: 0.75rem 1.5rem; border-radius: 8px; text-decoration: none; font-weight: 500;">
                        <i class="fas fa-plus"></i> Add Exams via Dashboard
                    </a>
                </div>
            <% } %>
        </div>
        
        <!-- Selection Form -->
        <div class="selection-form" id="selectionForm">
            <h3>Configure Your Practice Session</h3>
            
            <div class="form-row">
                <div class="form-group">
                    <label class="form-label" for="subjectSelect">Select Subject</label>
                    <select class="form-select" id="subjectSelect" onchange="loadQuestionPapers()">
                        <option value="">Choose a subject...</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label class="form-label" for="paperSelect">Select Question Paper</label>
                    <select class="form-select" id="paperSelect">
                        <option value="">Choose a question paper...</option>
                    </select>
                </div>
            </div>
            
            <div class="settings-grid">
                <div class="setting-card">
                    <label class="form-label">Duration (minutes)</label>
                    <input type="number" class="setting-input" id="duration" value="60" min="5" max="180">
                    <p style="font-size: 0.75rem; color: #6b7280; margin-top: 0.5rem;">Recommended: 1-2 minutes per question</p>
                </div>
                
                <div class="setting-card">
                    <label class="form-label">Number of Questions</label>
                    <input type="number" class="setting-input" id="questionCount" value="" placeholder="0" min="1" max="100" disabled>
                    <p style="font-size: 0.75rem; color: #6b7280; margin-top: 0.5rem;" id="questionHelp">Select a question paper first</p>
                </div>
            </div>
            
            <div style="text-align: center;">
                <button class="btn btn-primary btn-large" onclick="startPracticeSession()" disabled id="startBtn">
                    <i class="fas fa-play"></i> Start Practice Session
                </button>
            </div>
        </div>
        
        <!-- Quick Access Links -->
        <div class="quick-links">
            <a href="/practice/progress" class="quick-link">
                <i class="fas fa-chart-bar"></i> View Progress
            </a>
            <a href="/" class="quick-link">
                <i class="fas fa-home"></i> Back to Home
            </a>
        </div>
    </div>
    
    <script>
        let selectedExam = null;
        let subjects = [];
        let questionPapers = [];
        
        function selectExam(examId, examName) {
            selectedExam = { id: examId, name: examName };
            
            // Update visual selection
            document.querySelectorAll('.exam-card').forEach(card => {
                card.classList.remove('selected');
            });
            event.currentTarget.classList.add('selected');
            
            // Load subjects
            loadSubjects(examId);
            
            // Show form
            document.getElementById('selectionForm').classList.add('show');
        }
        
        async function loadSubjects(examId) {
            try {
                const response = await fetch(`/practice/api/subjects/${examId}`);
                const data = await response.json();
                subjects = data.subjects;
                
                const subjectSelect = document.getElementById('subjectSelect');
                subjectSelect.innerHTML = '<option value="">Choose a subject...</option>';
                
                subjects.forEach(subject => {
                    const option = document.createElement('option');
                    option.value = subject.subjectId;
                    option.textContent = subject.subjectName;
                    subjectSelect.appendChild(option);
                });
                
                // Reset other selects
                document.getElementById('paperSelect').innerHTML = '<option value="">Choose a question paper...</option>';
                updateStartButton();
            } catch (error) {
                console.error('Error loading subjects:', error);
            }
        }
        
        async function loadQuestionPapers() {
            const subjectId = document.getElementById('subjectSelect').value;
            if (!subjectId || !selectedExam) return;
            
            try {
                const response = await fetch(`/practice/api/questionPapers/${selectedExam.id}/${subjectId}`);
                const data = await response.json();
                questionPapers = data.questionPapers;
                
                const paperSelect = document.getElementById('paperSelect');
                paperSelect.innerHTML = '<option value="">Choose a question paper...</option>';
                
                questionPapers.forEach(paper => {
                    const option = document.createElement('option');
                    option.value = paper.questionPaperId;
                    option.textContent = `${paper.questionPaperName} (${paper.questions ? paper.questions.length : 0} questions)`;
                    paperSelect.appendChild(option);
                });
                
                // Add event listener for question paper selection
                paperSelect.addEventListener('change', updateQuestionSettings);
                
                updateStartButton();
            } catch (error) {
                console.error('Error loading question papers:', error);
            }
        }
        
        function updateQuestionSettings() {
            const paperSelect = document.getElementById('paperSelect');
            const selectedPaperId = paperSelect.value;
            const questionCountInput = document.getElementById('questionCount');
            const questionHelp = document.getElementById('questionHelp');
            
            if (selectedPaperId) {
                const selectedPaper = questionPapers.find(p => p.questionPaperId === selectedPaperId);
                if (selectedPaper && selectedPaper.questions) {
                    const maxQuestions = selectedPaper.questions.length;
                    
                    // Enable input and set constraints
                    questionCountInput.disabled = false;
                    questionCountInput.max = maxQuestions;
                    questionCountInput.min = 1;
                    questionCountInput.value = maxQuestions; // Set to max available questions
                    questionCountInput.placeholder = maxQuestions;
                    
                    // Update help text
                    questionHelp.textContent = `This paper contains ${maxQuestions} questions (max: ${maxQuestions})`;
                    questionHelp.style.color = '#059669'; // Green color for success
                } else {
                    questionCountInput.disabled = true;
                    questionCountInput.value = '';
                    questionHelp.textContent = 'No questions found in this paper';
                    questionHelp.style.color = '#dc2626'; // Red color for error
                }
            } else {
                // Reset when no paper is selected
                questionCountInput.disabled = true;
                questionCountInput.value = '';
                questionCountInput.placeholder = '0';
                questionCountInput.max = 100;
                questionHelp.textContent = 'Select a question paper first';
                questionHelp.style.color = '#6b7280'; // Gray color
            }
            
            updateStartButton();
        }
        
        function updateStartButton() {
            const subjectSelected = document.getElementById('subjectSelect').value;
            const paperSelected = document.getElementById('paperSelect').value;
            const startBtn = document.getElementById('startBtn');
            
            if (subjectSelected && paperSelected) {
                startBtn.disabled = false;
                startBtn.style.opacity = '1';
            } else {
                startBtn.disabled = true;
                startBtn.style.opacity = '0.5';
            }
        }
        
        function startPracticeSession() {
            const subjectId = document.getElementById('subjectSelect').value;
            const paperId = document.getElementById('paperSelect').value;
            const duration = document.getElementById('duration').value;
            const questionCount = document.getElementById('questionCount').value;
            
            if (!selectedExam || !subjectId || !paperId) {
                alert('Please select all required options');
                return;
            }
            
            const url = `/practice/session/${selectedExam.id}/${subjectId}/${paperId}?duration=${duration}&questionCount=${questionCount}`;
            window.location.href = url;
        }
        
        // Update start button when paper selection changes
        document.getElementById('paperSelect').addEventListener('change', updateStartButton);
    </script>
</body>
</html>
