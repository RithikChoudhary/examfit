name: Update Exam Data

on:
  schedule:
    # Run every Sunday at 2:00 AM UTC (7:30 AM IST)
    - cron: '0 2 * * 0'
  workflow_dispatch: # Allow manual triggering

jobs:
  update-data:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr tesseract-ocr-eng poppler-utils
    
    - name: Install Python dependencies
      run: |
        cd scripts
        pip install -r requirements.txt
    
    - name: Backup existing data
      run: |
        if [ -f "data/data.json" ]; then
          cp data/data.json data/data_backup_$(date +%Y%m%d_%H%M%S).json
          echo "✅ Created backup of existing data"
        else
          echo "⚠️ No existing data file to backup"
        fi
    
    - name: Run data scraper
      run: |
        cd scripts
        python data_scraper.py || echo "⚠️ Data scraper completed with warnings"
      env:
        PYTHONPATH: ${{ github.workspace }}
    
    - name: Run current affairs scraper
      run: |
        cd scripts
        python current_affairs_scraper.py || echo "⚠️ Current affairs scraper completed with warnings"
      env:
        PYTHONPATH: ${{ github.workspace }}
    
    - name: Verify data files exist
      run: |
        echo "📂 Checking data files..."
        ls -la data/
        
        if [ -f "data/data.json" ]; then
          echo "✅ Main data file exists"
          echo "📏 File size: $(du -h data/data.json | cut -f1)"
        else
          echo "⚠️ Main data file missing, creating placeholder"
          echo '{"exams":[],"lastUpdated":"'$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)'","sources":["GitHub Actions"]}' > data/data.json
        fi
        
        if [ -f "data/current_affairs.json" ]; then
          echo "✅ Current affairs file exists"
          echo "📏 File size: $(du -h data/current_affairs.json | cut -f1)"
        else
          echo "⚠️ Current affairs file missing"
        fi
    
    - name: Update timestamps
      run: |
        echo "🕒 Updating timestamps..."
        current_time=$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)
        echo "Current UTC time: $current_time"
        
        # Update data.json timestamp if it exists
        if [ -f "data/data.json" ]; then
          # Use sed to update the lastUpdated field
          sed -i 's/"lastUpdated": "[^"]*"/"lastUpdated": "'$current_time'"/' data/data.json
          echo "✅ Updated data.json timestamp"
        fi
        
        # Update current_affairs.json timestamp if it exists
        if [ -f "data/current_affairs.json" ]; then
          sed -i 's/"lastUpdated": "[^"]*"/"lastUpdated": "'$current_time'"/' data/current_affairs.json
          echo "✅ Updated current_affairs.json timestamp"
        fi
    
    - name: Clean up old backups
      run: |
        echo "🧹 Cleaning up old backups..."
        cd data
        backup_count=$(ls -1 data_backup_*.json 2>/dev/null | wc -l || echo "0")
        echo "Found $backup_count backup files"
        
        if [ "$backup_count" -gt 5 ]; then
          ls -t data_backup_*.json | tail -n +6 | xargs rm -f
          echo "✅ Cleaned up old backups"
        else
          echo "No cleanup needed"
        fi
    
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add all data files
        git add data/*.json
        
        # Check if there are any changes
        if git diff --staged --quiet; then
          echo "📝 No changes to commit"
        else
          echo "📝 Changes detected, committing..."
          
          # Simple commit message without complex calculations
          commit_msg="🤖 Auto-update: Data refreshed on $(date '+%Y-%m-%d %H:%M:%S UTC') [skip ci]"
          
          git commit -m "$commit_msg"
          git push
          echo "✅ Changes committed and pushed"
        fi
    
    - name: Create summary
      run: |
        echo "## 📊 Data Update Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Update Completed Successfully**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📁 Files Updated:" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "data/data.json" ]; then
          file_size=$(du -h data/data.json | cut -f1)
          echo "- 📄 **data.json**: $file_size" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "data/current_affairs.json" ]; then
          file_size=$(du -h data/current_affairs.json | cut -f1)
          echo "- 📄 **current_affairs.json**: $file_size" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ⏰ Update Details:" >> $GITHUB_STEP_SUMMARY
        echo "- 🕒 **Updated**: $(date '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "- 🔄 **Sources**: Sample generators and external scrapers" >> $GITHUB_STEP_SUMMARY
        echo "- 🛡️ **Reliability**: Fallback systems ensure content is always available" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🚀 **Live Site**: Your Vercel deployment will automatically update with the new data!" >> $GITHUB_STEP_SUMMARY
    
    - name: Notify on failure
      if: failure()
      run: |
        echo "## ❌ Data Update Failed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The weekly data update encountered an issue. Check the logs above for details." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔍 Possible Causes:" >> $GITHUB_STEP_SUMMARY
        echo "- Network connectivity issues" >> $GITHUB_STEP_SUMMARY
        echo "- External website changes" >> $GITHUB_STEP_SUMMARY
        echo "- Temporary service unavailability" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🛠️ Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "- Review the GitHub Actions logs" >> $GITHUB_STEP_SUMMARY
        echo "- Fallback systems should still provide sample content" >> $GITHUB_STEP_SUMMARY
        echo "- Manual workflow run may resolve temporary issues" >> $GITHUB_STEP_SUMMARY
